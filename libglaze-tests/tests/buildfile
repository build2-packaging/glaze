import libs = libglaze%lib{glaze}
import asio = libasio%lib{asio}
import eigen = Eigen%lib{Eigen}

define json: file
json{*}: extension = json

# Unit tests.
#
exe{*}:
{
  test = true
  install = false
}

for [dir_path] d: tests/{ \
                          *_test/ \
                          *_conformance/ \
                          *_parsing/ \
                          *_performance/ \
                          *_repe/ \
                          *_formats/ \
                        }
{
  n = $string($leaf($d))
  for t: tests/$n/cxx{*}
  {
    tn = $name($t)
    ./: exe{$tn}: ut/hxx{ut} tests/$n/hxx{*} tests/$n/cxx{$tn} tests/$n/json{**} $libs testscript
  }
}

# asio_repe
tests/asio_repe/exe{asio_repe}: $asio

# roundtrip
for [string] f : json beve
{
  n = roundtrip
  t = $n_$f
  ./: exe{$t}: ut/hxx{ut} tests/$n/json{**} tests/$n/obj{$t} testscript
  tests/$n/obj{$t}: ut/hxx{ut} tests/$n/hxx{*} tests/$n/cxx{*} $libs
  {
    cxx.poptions += "-I$src_base" "-DGLZ_TEST_FORMAT=glz::$string.ucase($f)"
  }
  tests/$n/obj{$t}: ut/hxx{ut} tests/$n/hxx{*} tests/$n/cxx{*} $libs
}

# Build options.
#
cxx.poptions += "-I$src_base"

# mock_json_test
tests/mock_json_test/obj{*}:
{
  cxx.poptions += "-DCURRENT_DIRECTORY=\"$regex.replace("$src_base/mock_json_test/$n", "[\\\]", "/")\""
}

# lib_test
tests/lib_test/obj{lib_test}:
{
  cxx.poptions += "-DTEST_LIB_INTERFACE_LOCATION=\"$regex.replace("$out_base", "[\\\]", "/")\""
}

# eigen_test
exe{eigen_test}: $eigen

# tests requiring certain compiler features
if ($cxx.id != 'msvc')
{
  tests/asio_repe/obj{*}: cxx.coptions += -fexceptions -frtti -DASIO_HAS_CO_AWAIT -DASIO_HAS_STD_COROUTIN
  tests/json_test/obj{*}: cxx.coptions += -fexceptions -frtti
  tests/json_performance/obj{*}: cxx.coptions += -fexceptions
  tests/exceptions_test/obj{*}: cxx.coptions += -fexceptions
}

# Common build options.
#
# See: https://github.com/stephenberry/glaze/blob/main/tests/CMakeLists.txt
switch $cxx.id: path.match, $cxx.target.system: path.match
{
  case 'gcc' | 'clang*'
  {
    cxx.coptions += \
      -fno-rtti \
      -fno-exceptions \
      -Wno-missing-braces
  }
  case 'gcc', 'mingw32'
  {
    cxx.coptions += \
      -Wa,-mbig-obj
  }
  case 'msvc' | 'msvc-clang'
  {
    cxx.coptions += \
      /permissive- \
      /bigobj \
      /GR- \
      /wd4459 \
      /wd4805 \
      /Zc:lambda \
      /Zc:preprocessor
  }
}
